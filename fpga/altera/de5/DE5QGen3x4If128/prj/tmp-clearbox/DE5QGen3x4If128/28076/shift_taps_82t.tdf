--altshift_taps CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Arria 10" NUMBER_OF_TAPS=1 POWER_UP_STATE="DONT_CARE" TAP_DISTANCE=6 WIDTH=6 aclr clock shiftin taps ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CARRY_CHAIN="MANUAL" CYCLONEII_M4K_COMPATIBILITY="ON" LOW_POWER_MODE="NONE"
--VERSION_BEGIN 17.1 cbx_altdpram 2017:10:19:12:43:07:SJ cbx_altera_counter 2017:10:19:12:43:07:SJ cbx_altera_syncram 2017:10:19:12:43:07:SJ cbx_altera_syncram_nd_impl 2017:10:19:12:43:07:SJ cbx_altshift_taps 2017:10:19:12:43:07:SJ cbx_altsyncram 2017:10:19:12:43:07:SJ cbx_cycloneii 2017:10:19:12:43:07:SJ cbx_lpm_add_sub 2017:10:19:12:43:07:SJ cbx_lpm_compare 2017:10:19:12:43:07:SJ cbx_lpm_counter 2017:10:19:12:43:07:SJ cbx_lpm_decode 2017:10:19:12:43:07:SJ cbx_lpm_mux 2017:10:19:12:43:07:SJ cbx_mgl 2017:10:19:13:11:58:SJ cbx_nadder 2017:10:19:12:43:07:SJ cbx_stratix 2017:10:19:12:43:07:SJ cbx_stratixii 2017:10:19:12:43:07:SJ cbx_stratixiii 2017:10:19:12:43:07:SJ cbx_stratixv 2017:10:19:12:43:07:SJ cbx_util_mgl 2017:10:19:12:43:07:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION altera_counter (clk, enable, reset, sreset, updown)
WITH ( DIRECTION, MODULUS, WIDTH = 6)
RETURNS ( count[WIDTH-1..0], cout);
FUNCTION altera_syncram_r391 (aclr0, address_a[2..0], address_b[2..0], clock0, clocken0, data_a[5..0], wren_a)
RETURNS ( q_b[5..0]);

--synthesis_resources = altera_counter 2 lut 3 M20K 1 reg 4 
SUBDESIGN shift_taps_82t
( 
	aclr	:	input;
	clock	:	input;
	shiftin[5..0]	:	input;
	shiftout[5..0]	:	output;
	taps[5..0]	:	output;
) 
VARIABLE 
	altera_counter1 : altera_counter
		WITH (
			DIRECTION = "UP",
			WIDTH = 3
		);
	altera_counter5 : altera_counter
		WITH (
			DIRECTION = "DOWN",
			MODULUS = 4,
			WIDTH = 3
		);
	altera_syncram4 : altera_syncram_r391;
	dffe3a[2..0] : dffe;
	dffe6 : dffe;
	add_sub2_dataa[2..0]	:	WIRE;
	add_sub2_datab[2..0]	:	WIRE;
	add_sub2_result[2..0]	:	WIRE;
	clken	: NODE;
	rdaddress[2..0]	: WIRE;
	sclr	: NODE;

BEGIN 
	altera_counter1.clk = clock;
	altera_counter1.enable = clken;
	altera_counter5.clk = clock;
	altera_counter5.enable = clken;
	altera_counter5.reset = aclr;
	altera_counter5.sreset = sclr;
	altera_syncram4.aclr0 = dffe6.q;
	altera_syncram4.address_a[] = altera_counter1.count[];
	altera_syncram4.address_b[] = rdaddress[];
	altera_syncram4.clock0 = clock;
	altera_syncram4.clocken0 = clken;
	altera_syncram4.data_a[] = ( shiftin[]);
	altera_syncram4.wren_a = B"1";
	dffe3a[].clk = clock;
	dffe3a[].d = ( add_sub2_result[2..2], (! add_sub2_result[1..1]), add_sub2_result[0..0]);
	dffe3a[].ena = clken;
	dffe6.clk = clock;
	dffe6.d = altera_counter5.cout;
	dffe6.ena = clken;
	dffe6.prn = (! aclr);
	add_sub2_result[] = add_sub2_dataa[] + add_sub2_datab[];
	add_sub2_dataa[] = altera_counter1.count[];
	add_sub2_datab[] = B"101";
	clken = VCC;
	rdaddress[] = ( dffe3a[2..2].q, (! dffe3a[1..1].q), dffe3a[0..0].q);
	sclr = GND;
	shiftout[5..0] = altera_syncram4.q_b[5..0];
	taps[] = altera_syncram4.q_b[];
END;
--VALID FILE

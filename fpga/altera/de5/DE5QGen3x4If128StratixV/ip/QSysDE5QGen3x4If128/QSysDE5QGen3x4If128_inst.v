	QSysDE5QGen3x4If128 u0 (
		.drvstat_derr_cor_ext_rcv   (<connected-to-drvstat_derr_cor_ext_rcv>),   //        drvstat.derr_cor_ext_rcv
		.drvstat_derr_cor_ext_rpl   (<connected-to-drvstat_derr_cor_ext_rpl>),   //               .derr_cor_ext_rpl
		.drvstat_derr_rpl           (<connected-to-drvstat_derr_rpl>),           //               .derr_rpl
		.drvstat_dlup_exit          (<connected-to-drvstat_dlup_exit>),          //               .dlup_exit
		.drvstat_ev128ns            (<connected-to-drvstat_ev128ns>),            //               .ev128ns
		.drvstat_ev1us              (<connected-to-drvstat_ev1us>),              //               .ev1us
		.drvstat_hotrst_exit        (<connected-to-drvstat_hotrst_exit>),        //               .hotrst_exit
		.drvstat_int_status         (<connected-to-drvstat_int_status>),         //               .int_status
		.drvstat_l2_exit            (<connected-to-drvstat_l2_exit>),            //               .l2_exit
		.drvstat_lane_act           (<connected-to-drvstat_lane_act>),           //               .lane_act
		.drvstat_ltssmstate         (<connected-to-drvstat_ltssmstate>),         //               .ltssmstate
		.drvstat_dlup               (<connected-to-drvstat_dlup>),               //               .dlup
		.drvstat_rx_par_err         (<connected-to-drvstat_rx_par_err>),         //               .rx_par_err
		.drvstat_tx_par_err         (<connected-to-drvstat_tx_par_err>),         //               .tx_par_err
		.drvstat_cfg_par_err        (<connected-to-drvstat_cfg_par_err>),        //               .cfg_par_err
		.drvstat_ko_cpl_spc_header  (<connected-to-drvstat_ko_cpl_spc_header>),  //               .ko_cpl_spc_header
		.drvstat_ko_cpl_spc_data    (<connected-to-drvstat_ko_cpl_spc_data>),    //               .ko_cpl_spc_data
		.mgmtclk_clk                (<connected-to-mgmtclk_clk>),                //        mgmtclk.clk
		.mgmtrst_reset              (<connected-to-mgmtrst_reset>),              //        mgmtrst.reset
		.pciecfg_hpg_ctrler         (<connected-to-pciecfg_hpg_ctrler>),         //        pciecfg.hpg_ctrler
		.pciecfg_tl_cfg_add         (<connected-to-pciecfg_tl_cfg_add>),         //               .tl_cfg_add
		.pciecfg_tl_cfg_ctl         (<connected-to-pciecfg_tl_cfg_ctl>),         //               .tl_cfg_ctl
		.pciecfg_tl_cfg_sts         (<connected-to-pciecfg_tl_cfg_sts>),         //               .tl_cfg_sts
		.pciecfg_cpl_err            (<connected-to-pciecfg_cpl_err>),            //               .cpl_err
		.pciecfg_cpl_pending        (<connected-to-pciecfg_cpl_pending>),        //               .cpl_pending
		.pciecoreclk_clk            (<connected-to-pciecoreclk_clk>),            //    pciecoreclk.clk
		.pciehip_reset_status       (<connected-to-pciehip_reset_status>),       //        pciehip.reset_status
		.pciehip_serdes_pll_locked  (<connected-to-pciehip_serdes_pll_locked>),  //               .serdes_pll_locked
		.pciehip_pld_clk_inuse      (<connected-to-pciehip_pld_clk_inuse>),      //               .pld_clk_inuse
		.pciehip_pld_core_ready     (<connected-to-pciehip_pld_core_ready>),     //               .pld_core_ready
		.pciehip_testin_zero        (<connected-to-pciehip_testin_zero>),        //               .testin_zero
		.pciemsi_app_int_sts        (<connected-to-pciemsi_app_int_sts>),        //        pciemsi.app_int_sts
		.pciemsi_app_msi_num        (<connected-to-pciemsi_app_msi_num>),        //               .app_msi_num
		.pciemsi_app_msi_req        (<connected-to-pciemsi_app_msi_req>),        //               .app_msi_req
		.pciemsi_app_msi_tc         (<connected-to-pciemsi_app_msi_tc>),         //               .app_msi_tc
		.pciemsi_app_int_ack        (<connected-to-pciemsi_app_int_ack>),        //               .app_int_ack
		.pciemsi_app_msi_ack        (<connected-to-pciemsi_app_msi_ack>),        //               .app_msi_ack
		.pcienpor_npor              (<connected-to-pcienpor_npor>),              //       pcienpor.npor
		.pcienpor_pin_perst         (<connected-to-pcienpor_pin_perst>),         //               .pin_perst
		.pciepld_clk                (<connected-to-pciepld_clk>),                //        pciepld.clk
		.pcierefclk_clk             (<connected-to-pcierefclk_clk>),             //     pcierefclk.clk
		.pcieserial_rx_in0          (<connected-to-pcieserial_rx_in0>),          //     pcieserial.rx_in0
		.pcieserial_rx_in1          (<connected-to-pcieserial_rx_in1>),          //               .rx_in1
		.pcieserial_rx_in2          (<connected-to-pcieserial_rx_in2>),          //               .rx_in2
		.pcieserial_rx_in3          (<connected-to-pcieserial_rx_in3>),          //               .rx_in3
		.pcieserial_tx_out0         (<connected-to-pcieserial_tx_out0>),         //               .tx_out0
		.pcieserial_tx_out1         (<connected-to-pcieserial_tx_out1>),         //               .tx_out1
		.pcieserial_tx_out2         (<connected-to-pcieserial_tx_out2>),         //               .tx_out2
		.pcieserial_tx_out3         (<connected-to-pcieserial_tx_out3>),         //               .tx_out3
		.pciestat_derr_cor_ext_rcv  (<connected-to-pciestat_derr_cor_ext_rcv>),  //       pciestat.derr_cor_ext_rcv
		.pciestat_derr_cor_ext_rpl  (<connected-to-pciestat_derr_cor_ext_rpl>),  //               .derr_cor_ext_rpl
		.pciestat_derr_rpl          (<connected-to-pciestat_derr_rpl>),          //               .derr_rpl
		.pciestat_dlup              (<connected-to-pciestat_dlup>),              //               .dlup
		.pciestat_dlup_exit         (<connected-to-pciestat_dlup_exit>),         //               .dlup_exit
		.pciestat_ev128ns           (<connected-to-pciestat_ev128ns>),           //               .ev128ns
		.pciestat_ev1us             (<connected-to-pciestat_ev1us>),             //               .ev1us
		.pciestat_hotrst_exit       (<connected-to-pciestat_hotrst_exit>),       //               .hotrst_exit
		.pciestat_int_status        (<connected-to-pciestat_int_status>),        //               .int_status
		.pciestat_l2_exit           (<connected-to-pciestat_l2_exit>),           //               .l2_exit
		.pciestat_lane_act          (<connected-to-pciestat_lane_act>),          //               .lane_act
		.pciestat_ltssmstate        (<connected-to-pciestat_ltssmstate>),        //               .ltssmstate
		.pciestat_rx_par_err        (<connected-to-pciestat_rx_par_err>),        //               .rx_par_err
		.pciestat_tx_par_err        (<connected-to-pciestat_tx_par_err>),        //               .tx_par_err
		.pciestat_cfg_par_err       (<connected-to-pciestat_cfg_par_err>),       //               .cfg_par_err
		.pciestat_ko_cpl_spc_header (<connected-to-pciestat_ko_cpl_spc_header>), //               .ko_cpl_spc_header
		.pciestat_ko_cpl_spc_data   (<connected-to-pciestat_ko_cpl_spc_data>),   //               .ko_cpl_spc_data
		.reconfigpldclk_clk         (<connected-to-reconfigpldclk_clk>),         // reconfigpldclk.clk
		.reconfigrefclk_clk         (<connected-to-reconfigrefclk_clk>),         // reconfigrefclk.clk
		.reconfigrst_reset          (<connected-to-reconfigrst_reset>),          //    reconfigrst.reset
		.rx_st_startofpacket        (<connected-to-rx_st_startofpacket>),        //          rx_st.startofpacket
		.rx_st_endofpacket          (<connected-to-rx_st_endofpacket>),          //               .endofpacket
		.rx_st_error                (<connected-to-rx_st_error>),                //               .error
		.rx_st_valid                (<connected-to-rx_st_valid>),                //               .valid
		.rx_st_empty                (<connected-to-rx_st_empty>),                //               .empty
		.rx_st_ready                (<connected-to-rx_st_ready>),                //               .ready
		.rx_st_data                 (<connected-to-rx_st_data>),                 //               .data
		.tx_st_startofpacket        (<connected-to-tx_st_startofpacket>),        //          tx_st.startofpacket
		.tx_st_endofpacket          (<connected-to-tx_st_endofpacket>),          //               .endofpacket
		.tx_st_error                (<connected-to-tx_st_error>),                //               .error
		.tx_st_valid                (<connected-to-tx_st_valid>),                //               .valid
		.tx_st_empty                (<connected-to-tx_st_empty>),                //               .empty
		.tx_st_ready                (<connected-to-tx_st_ready>),                //               .ready
		.tx_st_data                 (<connected-to-tx_st_data>)                  //               .data
	);


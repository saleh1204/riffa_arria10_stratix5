--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Arria 10" LPM_DECODES=8 LPM_WIDTH=3 data enable eq
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:19:12:43:07:SJ cbx_lpm_add_sub 2017:10:19:12:43:07:SJ cbx_lpm_compare 2017:10:19:12:43:07:SJ cbx_lpm_decode 2017:10:19:12:43:07:SJ cbx_mgl 2017:10:19:13:11:58:SJ cbx_nadder 2017:10:19:12:43:07:SJ cbx_stratix 2017:10:19:12:43:07:SJ cbx_stratixii 2017:10:19:12:43:07:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 8 
SUBDESIGN decode_qda
( 
	data[2..0]	:	input;
	enable	:	input;
	eq[7..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[7..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode283w[3..0]	: WIRE;
	w_anode300w[3..0]	: WIRE;
	w_anode310w[3..0]	: WIRE;
	w_anode320w[3..0]	: WIRE;
	w_anode330w[3..0]	: WIRE;
	w_anode340w[3..0]	: WIRE;
	w_anode350w[3..0]	: WIRE;
	w_anode360w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[7..0] = eq_wire[7..0];
	eq_wire[] = ( w_anode360w[3..3], w_anode350w[3..3], w_anode340w[3..3], w_anode330w[3..3], w_anode320w[3..3], w_anode310w[3..3], w_anode300w[3..3], w_anode283w[3..3]);
	w_anode283w[] = ( (w_anode283w[2..2] & (! data_wire[2..2])), (w_anode283w[1..1] & (! data_wire[1..1])), (w_anode283w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode300w[] = ( (w_anode300w[2..2] & (! data_wire[2..2])), (w_anode300w[1..1] & (! data_wire[1..1])), (w_anode300w[0..0] & data_wire[0..0]), enable_wire);
	w_anode310w[] = ( (w_anode310w[2..2] & (! data_wire[2..2])), (w_anode310w[1..1] & data_wire[1..1]), (w_anode310w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode320w[] = ( (w_anode320w[2..2] & (! data_wire[2..2])), (w_anode320w[1..1] & data_wire[1..1]), (w_anode320w[0..0] & data_wire[0..0]), enable_wire);
	w_anode330w[] = ( (w_anode330w[2..2] & data_wire[2..2]), (w_anode330w[1..1] & (! data_wire[1..1])), (w_anode330w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode340w[] = ( (w_anode340w[2..2] & data_wire[2..2]), (w_anode340w[1..1] & (! data_wire[1..1])), (w_anode340w[0..0] & data_wire[0..0]), enable_wire);
	w_anode350w[] = ( (w_anode350w[2..2] & data_wire[2..2]), (w_anode350w[1..1] & data_wire[1..1]), (w_anode350w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode360w[] = ( (w_anode360w[2..2] & data_wire[2..2]), (w_anode360w[1..1] & data_wire[1..1]), (w_anode360w[0..0] & data_wire[0..0]), enable_wire);
END;
--VALID FILE
